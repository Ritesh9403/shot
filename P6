import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import matplotlib.pyplot as plt
data=pd.read_csv("C:\\Users\sspm\Documents\\iris (2).csv")
X=data.drop(['species'],axis=1)
y=data.drop(['sepal_length', 'sepal_width' , 'petal_length' , 'petal_width'],axis=1)
print(X)
print(y)
print(X.shape)
print(y.shape)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X , y, test_size=0.2, shuffle=True)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)
from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train, y_train)
C:\Users\sspm\anaconda3\lib\site-packages\sklearn\utils\validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().
  y = column_or_1d(y, warn=True)
GaussianNB()
y_pred = model.predict(X_test)
model.score(X_test,y_test)*100
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
print(accuracy_score(y_test, y_pred)*100)
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix = cm)
print("Confusion matrix:")
print(cm)
disp.plot()
plt.show()
def get_confusion_matrix_values(y_true,y_pred):
    cm=confusion_matrix(y_true,y_pred)
    return(cm[0][0],cm[0][1],cm[1][0],cm[1][1])
print("TP: ", TP)
print("FP: ", FP)
print("FN: ", FN)
print("TN: ", TN)
TP, FP, FN, TN = get_confusion_matrix_values(y_test, y_pred)
print("The Accuracy is ", (TP+TN)/(TP+TN+FP+FN))
print("The precision is ", TP/(TP+FP))
print("The recall is ", TP/(TP+FN))
